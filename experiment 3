Experiment 3



1.	#include <stdio.h>
2.	#include <malloc.h>
3.	#include <stdlib.h>
4.	 
5.	struct node {
6.	int value;
7.	struct node *next;
8.	};
9.	 
10.	void insert();
11.	void display();
12.	void delete();
13.	int count();
14.	 
15.	typedef struct node DATA_NODE;
16.	 
17.	DATA_NODE *head_node, *first_node, *temp_node = 0, *prev_node, next_node;
18.	int data;
19.	 
20.	int main() {
21.	int option = 0;
22.	 
23.	printf("Singly Linked List Example - All Operations\n");
24.	 
25.	while (option < 5) {
26.	 
27.	printf("\nOptions\n");
28.	printf("1 : Insert into Linked List \n");
29.	printf("2 : Delete from Linked List \n");
30.	printf("3 : Display Linked List\n");
31.	printf("4 : Count Linked List\n");
32.	printf("Others : Exit()\n");
33.	printf("Enter your option:");
34.	scanf("%d", &option);
35.	switch (option) {
36.	case 1:
37.	insert();
38.	break;
39.	case 2:
40.	delete();
41.	break;
42.	case 3:
43.	display();
44.	break;
45.	case 4:
46.	count();
47.	break;
48.	default:
49.	break;
50.	}
51.	}
52.	 
53.	return 0;
54.	}
55.	 
56.	void insert() {
57.	printf("\nEnter Element for Insert Linked List : \n");
58.	scanf("%d", &data);
59.	 
60.	temp_node = (DATA_NODE *) malloc(sizeof (DATA_NODE));
61.	 
62.	temp_node->value = data;
63.	 
64.	if (first_node == 0) {
65.	first_node = temp_node;
66.	} else {
67.	head_node->next = temp_node;
68.	}
69.	temp_node->next = 0;
70.	head_node = temp_node;
71.	fflush(stdin);
72.	}
73.	 
74.	void delete() {
75.	int countvalue, pos, i = 0;
76.	countvalue = count();
77.	temp_node = first_node;
78.	printf("\nDisplay Linked List : \n");
79.	 
80.	printf("\nEnter Position for Delete Element : \n");
81.	scanf("%d", &pos);
82.	 
83.	if (pos > 0 && pos <= countvalue) {
84.	if (pos == 1) {
85.	temp_node = temp_node -> next;
86.	first_node = temp_node;
87.	printf("\nDeleted Successfully \n\n");
88.	} else {
89.	while (temp_node != 0) {
90.	if (i == (pos - 1)) {
91.	prev_node->next = temp_node->next;
92.	if(i == (countvalue - 1))
93.	{
94.	head_node = prev_node;
95.	}
96.	printf("\nDeleted Successfully \n\n");
97.	break;
98.	} else {
99.	i++;
100.	prev_node = temp_node;
101.	temp_node = temp_node -> next;
102.	}
103.	}
104.	}
105.	} else
106.	printf("\nInvalid Position \n\n");
107.	}
108.	 
109.	void display() {
110.	int count = 0;
111.	temp_node = first_node;
112.	printf("\nDisplay Linked List : \n");
113.	while (temp_node != 0) {
114.	printf("# %d # ", temp_node->value);
115.	count++;
116.	temp_node = temp_node -> next;
117.	}
118.	printf("\nNo Of Items In Linked List : %d\n", count);
119.	}
120.	 
121.	int count() {
122.	int count = 0;
123.	temp_node = first_node;
124.	while (temp_node != 0) {
125.	count++;
126.	temp_node = temp_node -> next;
127.	}
128.	printf("\nNo Of Items In Linked List : %d\n", count);
129.	return count;
130.	}










